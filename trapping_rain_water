class Solution:
	
	def trap(self, height: List[int]) -> int:
		h = height
		lm = []
		temp = -1
		up = True
		for i in range(len(h)):

			if i == len(h) - 1 and h[i] >= h[temp]:
				lm.append(i)

			elif h[i] > 0 and temp == -1:
				temp = i

			elif temp != -1 and h[i] < h[temp]:
				if ((temp > 0 and h[temp] >= h[temp-1]) or temp == 0) and up:
					lm.append(temp)
					temp = -1
					up = False

			elif temp != -1 and h[i] >= h[temp]:
				temp = i

			if i > 0 and h[i] > h[i-1]:
				up = True
				temp = i
		
		lm = clean_maxs(lm, h)
		
		ret = 0
		for i in range(len(lm) - 1):
			restrict = min(h[lm[i]], h[lm[i+1]])
			start = restrict * (lm[i+1] - lm[i] - 1)


			for x in range(lm[i]+1,lm[i+1]):
				if h[x] > restrict:
					start -= restrict
				else:
					start -= h[x]

			ret += start
		
		return ret
	
def clean_maxs(lm, h):
	if len(lm) < 3:
		return lm
	else:
		mx = 1

		for i in range(1, len(lm)):
			if h[lm[0]] < h[lm[i]]:
				lm = lm[0:1] + clean_maxs(lm[i:len(lm)], h)
				return lm
			else:
				if h[lm[mx]] < h[lm[i]]:
					mx = i

		return lm[0:1] + clean_maxs(lm[mx:len(lm)], h)
